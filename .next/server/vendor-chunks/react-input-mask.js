/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-input-mask";
exports.ids = ["vendor-chunks/react-input-mask"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-input-mask/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-input-mask/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("if (false) {} else {\n    module.exports = __webpack_require__(/*! ./lib/react-input-mask.development.js */ \"(ssr)/./node_modules/react-input-mask/lib/react-input-mask.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5wdXQtbWFzay9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxLQUF5QixFQUFjLEVBRTFDLE1BQU07SUFDTEMsOEpBQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWJkdWxheml6LXByb2dyYW1tZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtaW5wdXQtbWFzay9pbmRleC5qcz82YzVhIl0sInNvdXJjZXNDb250ZW50IjpbImlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvcmVhY3QtaW5wdXQtbWFzay5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9yZWFjdC1pbnB1dC1tYXNrLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-input-mask/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-input-mask/lib/react-input-mask.development.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-input-mask/lib/react-input-mask.development.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nfunction _interopDefault(ex) {\n    return ex && typeof ex === \"object\" && \"default\" in ex ? ex[\"default\"] : ex;\n}\nvar React = _interopDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar invariant = _interopDefault(__webpack_require__(/*! invariant */ \"(ssr)/./node_modules/invariant/invariant.js\"));\nvar warning = _interopDefault(__webpack_require__(/*! warning */ \"(ssr)/./node_modules/warning/warning.js\"));\nfunction _defaults2(obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for(var i = 0; i < keys.length; i++){\n        var key = keys[i];\n        var value = Object.getOwnPropertyDescriptor(defaults, key);\n        if (value && value.configurable && obj[key] === undefined) {\n            Object.defineProperty(obj, key, value);\n        }\n    }\n    return obj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _defaults2(subClass, superClass);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction setInputSelection(input, start, end) {\n    if (\"selectionStart\" in input && \"selectionEnd\" in input) {\n        input.selectionStart = start;\n        input.selectionEnd = end;\n    } else {\n        var range = input.createTextRange();\n        range.collapse(true);\n        range.moveStart(\"character\", start);\n        range.moveEnd(\"character\", end - start);\n        range.select();\n    }\n}\nfunction getInputSelection(input) {\n    var start = 0;\n    var end = 0;\n    if (\"selectionStart\" in input && \"selectionEnd\" in input) {\n        start = input.selectionStart;\n        end = input.selectionEnd;\n    } else {\n        var range = document.selection.createRange();\n        if (range.parentElement() === input) {\n            start = -range.moveStart(\"character\", -input.value.length);\n            end = -range.moveEnd(\"character\", -input.value.length);\n        }\n    }\n    return {\n        start: start,\n        end: end,\n        length: end - start\n    };\n}\nvar defaultFormatChars = {\n    \"9\": \"[0-9]\",\n    \"a\": \"[A-Za-z]\",\n    \"*\": \"[A-Za-z0-9]\"\n};\nvar defaultMaskChar = \"_\";\nfunction parseMask(mask, maskChar, formatChars) {\n    var parsedMaskString = \"\";\n    var prefix = \"\";\n    var lastEditablePosition = null;\n    var permanents = [];\n    if (maskChar === undefined) {\n        maskChar = defaultMaskChar;\n    }\n    if (formatChars == null) {\n        formatChars = defaultFormatChars;\n    }\n    if (!mask || typeof mask !== \"string\") {\n        return {\n            maskChar: maskChar,\n            formatChars: formatChars,\n            mask: null,\n            prefix: null,\n            lastEditablePosition: null,\n            permanents: []\n        };\n    }\n    var isPermanent = false;\n    mask.split(\"\").forEach(function(character) {\n        if (!isPermanent && character === \"\\\\\") {\n            isPermanent = true;\n        } else {\n            if (isPermanent || !formatChars[character]) {\n                permanents.push(parsedMaskString.length);\n                if (parsedMaskString.length === permanents.length - 1) {\n                    prefix += character;\n                }\n            } else {\n                lastEditablePosition = parsedMaskString.length + 1;\n            }\n            parsedMaskString += character;\n            isPermanent = false;\n        }\n    });\n    return {\n        maskChar: maskChar,\n        formatChars: formatChars,\n        prefix: prefix,\n        mask: parsedMaskString,\n        lastEditablePosition: lastEditablePosition,\n        permanents: permanents\n    };\n}\n/* eslint no-use-before-define: [\"error\", { functions: false }] */ function isPermanentCharacter(maskOptions, pos) {\n    return maskOptions.permanents.indexOf(pos) !== -1;\n}\nfunction isAllowedCharacter(maskOptions, pos, character) {\n    var mask = maskOptions.mask, formatChars = maskOptions.formatChars;\n    if (!character) {\n        return false;\n    }\n    if (isPermanentCharacter(maskOptions, pos)) {\n        return mask[pos] === character;\n    }\n    var ruleChar = mask[pos];\n    var charRule = formatChars[ruleChar];\n    return new RegExp(charRule).test(character);\n}\nfunction isEmpty(maskOptions, value) {\n    return value.split(\"\").every(function(character, i) {\n        return isPermanentCharacter(maskOptions, i) || !isAllowedCharacter(maskOptions, i, character);\n    });\n}\nfunction getFilledLength(maskOptions, value) {\n    var maskChar = maskOptions.maskChar, prefix = maskOptions.prefix;\n    if (!maskChar) {\n        while(value.length > prefix.length && isPermanentCharacter(maskOptions, value.length - 1)){\n            value = value.slice(0, value.length - 1);\n        }\n        return value.length;\n    }\n    var filledLength = prefix.length;\n    for(var i = value.length; i >= prefix.length; i--){\n        var character = value[i];\n        var isEnteredCharacter = !isPermanentCharacter(maskOptions, i) && isAllowedCharacter(maskOptions, i, character);\n        if (isEnteredCharacter) {\n            filledLength = i + 1;\n            break;\n        }\n    }\n    return filledLength;\n}\nfunction isFilled(maskOptions, value) {\n    return getFilledLength(maskOptions, value) === maskOptions.mask.length;\n}\nfunction formatValue(maskOptions, value) {\n    var maskChar = maskOptions.maskChar, mask = maskOptions.mask, prefix = maskOptions.prefix;\n    if (!maskChar) {\n        value = insertString(maskOptions, \"\", value, 0);\n        if (value.length < prefix.length) {\n            value = prefix;\n        }\n        while(value.length < mask.length && isPermanentCharacter(maskOptions, value.length)){\n            value += mask[value.length];\n        }\n        return value;\n    }\n    if (value) {\n        var emptyValue = formatValue(maskOptions, \"\");\n        return insertString(maskOptions, emptyValue, value, 0);\n    }\n    for(var i = 0; i < mask.length; i++){\n        if (isPermanentCharacter(maskOptions, i)) {\n            value += mask[i];\n        } else {\n            value += maskChar;\n        }\n    }\n    return value;\n}\nfunction clearRange(maskOptions, value, start, len) {\n    var end = start + len;\n    var maskChar = maskOptions.maskChar, mask = maskOptions.mask, prefix = maskOptions.prefix;\n    var arrayValue = value.split(\"\");\n    if (!maskChar) {\n        // remove any permanent chars after clear range, they will be added back by formatValue\n        for(var i = end; i < arrayValue.length; i++){\n            if (isPermanentCharacter(maskOptions, i)) {\n                arrayValue[i] = \"\";\n            }\n        }\n        start = Math.max(prefix.length, start);\n        arrayValue.splice(start, end - start);\n        value = arrayValue.join(\"\");\n        return formatValue(maskOptions, value);\n    }\n    return arrayValue.map(function(character, i) {\n        if (i < start || i >= end) {\n            return character;\n        }\n        if (isPermanentCharacter(maskOptions, i)) {\n            return mask[i];\n        }\n        return maskChar;\n    }).join(\"\");\n}\nfunction insertString(maskOptions, value, insertStr, insertPosition) {\n    var mask = maskOptions.mask, maskChar = maskOptions.maskChar, prefix = maskOptions.prefix;\n    var arrayInsertStr = insertStr.split(\"\");\n    var isInputFilled = isFilled(maskOptions, value);\n    var isUsablePosition = function isUsablePosition(pos, character) {\n        return !isPermanentCharacter(maskOptions, pos) || character === mask[pos];\n    };\n    var isUsableCharacter = function isUsableCharacter(character, pos) {\n        return !maskChar || !isPermanentCharacter(maskOptions, pos) || character !== maskChar;\n    };\n    if (!maskChar && insertPosition > value.length) {\n        value += mask.slice(value.length, insertPosition);\n    }\n    arrayInsertStr.every(function(insertCharacter) {\n        while(!isUsablePosition(insertPosition, insertCharacter)){\n            if (insertPosition >= value.length) {\n                value += mask[insertPosition];\n            }\n            if (!isUsableCharacter(insertCharacter, insertPosition)) {\n                return true;\n            }\n            insertPosition++; // stop iteration if maximum value length reached\n            if (insertPosition >= mask.length) {\n                return false;\n            }\n        }\n        var isAllowed = isAllowedCharacter(maskOptions, insertPosition, insertCharacter) || insertCharacter === maskChar;\n        if (!isAllowed) {\n            return true;\n        }\n        if (insertPosition < value.length) {\n            if (maskChar || isInputFilled || insertPosition < prefix.length) {\n                value = value.slice(0, insertPosition) + insertCharacter + value.slice(insertPosition + 1);\n            } else {\n                value = value.slice(0, insertPosition) + insertCharacter + value.slice(insertPosition);\n                value = formatValue(maskOptions, value);\n            }\n        } else if (!maskChar) {\n            value += insertCharacter;\n        }\n        insertPosition++; // stop iteration if maximum value length reached\n        return insertPosition < mask.length;\n    });\n    return value;\n}\nfunction getInsertStringLength(maskOptions, value, insertStr, insertPosition) {\n    var mask = maskOptions.mask, maskChar = maskOptions.maskChar;\n    var arrayInsertStr = insertStr.split(\"\");\n    var initialInsertPosition = insertPosition;\n    var isUsablePosition = function isUsablePosition(pos, character) {\n        return !isPermanentCharacter(maskOptions, pos) || character === mask[pos];\n    };\n    arrayInsertStr.every(function(insertCharacter) {\n        while(!isUsablePosition(insertPosition, insertCharacter)){\n            insertPosition++; // stop iteration if maximum value length reached\n            if (insertPosition >= mask.length) {\n                return false;\n            }\n        }\n        var isAllowed = isAllowedCharacter(maskOptions, insertPosition, insertCharacter) || insertCharacter === maskChar;\n        if (isAllowed) {\n            insertPosition++;\n        } // stop iteration if maximum value length reached\n        return insertPosition < mask.length;\n    });\n    return insertPosition - initialInsertPosition;\n}\nfunction getLeftEditablePosition(maskOptions, pos) {\n    for(var i = pos; i >= 0; --i){\n        if (!isPermanentCharacter(maskOptions, i)) {\n            return i;\n        }\n    }\n    return null;\n}\nfunction getRightEditablePosition(maskOptions, pos) {\n    var mask = maskOptions.mask;\n    for(var i = pos; i < mask.length; ++i){\n        if (!isPermanentCharacter(maskOptions, i)) {\n            return i;\n        }\n    }\n    return null;\n}\nfunction getStringValue(value) {\n    return !value && value !== 0 ? \"\" : value + \"\";\n}\nfunction processChange(maskOptions, value, selection, previousValue, previousSelection) {\n    var mask = maskOptions.mask, prefix = maskOptions.prefix, lastEditablePosition = maskOptions.lastEditablePosition;\n    var newValue = value;\n    var enteredString = \"\";\n    var formattedEnteredStringLength = 0;\n    var removedLength = 0;\n    var cursorPosition = Math.min(previousSelection.start, selection.start);\n    if (selection.end > previousSelection.start) {\n        enteredString = newValue.slice(previousSelection.start, selection.end);\n        formattedEnteredStringLength = getInsertStringLength(maskOptions, previousValue, enteredString, cursorPosition);\n        if (!formattedEnteredStringLength) {\n            removedLength = 0;\n        } else {\n            removedLength = previousSelection.length;\n        }\n    } else if (newValue.length < previousValue.length) {\n        removedLength = previousValue.length - newValue.length;\n    }\n    newValue = previousValue;\n    if (removedLength) {\n        if (removedLength === 1 && !previousSelection.length) {\n            var deleteFromRight = previousSelection.start === selection.start;\n            cursorPosition = deleteFromRight ? getRightEditablePosition(maskOptions, selection.start) : getLeftEditablePosition(maskOptions, selection.start);\n        }\n        newValue = clearRange(maskOptions, newValue, cursorPosition, removedLength);\n    }\n    newValue = insertString(maskOptions, newValue, enteredString, cursorPosition);\n    cursorPosition = cursorPosition + formattedEnteredStringLength;\n    if (cursorPosition >= mask.length) {\n        cursorPosition = mask.length;\n    } else if (cursorPosition < prefix.length && !formattedEnteredStringLength) {\n        cursorPosition = prefix.length;\n    } else if (cursorPosition >= prefix.length && cursorPosition < lastEditablePosition && formattedEnteredStringLength) {\n        cursorPosition = getRightEditablePosition(maskOptions, cursorPosition);\n    }\n    newValue = formatValue(maskOptions, newValue);\n    if (!enteredString) {\n        enteredString = null;\n    }\n    return {\n        value: newValue,\n        enteredString: enteredString,\n        selection: {\n            start: cursorPosition,\n            end: cursorPosition\n        }\n    };\n}\nfunction isWindowsPhoneBrowser() {\n    var windows = new RegExp(\"windows\", \"i\");\n    var phone = new RegExp(\"phone\", \"i\");\n    var ua = navigator.userAgent;\n    return windows.test(ua) && phone.test(ua);\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction getRequestAnimationFrame() {\n    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;\n}\nfunction getCancelAnimationFrame() {\n    return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame;\n}\nfunction defer(fn) {\n    var hasCancelAnimationFrame = !!getCancelAnimationFrame();\n    var deferFn;\n    if (hasCancelAnimationFrame) {\n        deferFn = getRequestAnimationFrame();\n    } else {\n        deferFn = function deferFn() {\n            return setTimeout(fn, 1000 / 60);\n        };\n    }\n    return deferFn(fn);\n}\nfunction cancelDefer(deferId) {\n    var cancelFn = getCancelAnimationFrame() || clearTimeout;\n    cancelFn(deferId);\n}\nvar InputElement = /*#__PURE__*/ function(_React$Component) {\n    _inheritsLoose(InputElement, _React$Component);\n    function InputElement(props) {\n        var _this;\n        _this = _React$Component.call(this, props) || this;\n        _this.focused = false;\n        _this.mounted = false;\n        _this.previousSelection = null;\n        _this.selectionDeferId = null;\n        _this.saveSelectionLoopDeferId = null;\n        _this.saveSelectionLoop = function() {\n            _this.previousSelection = _this.getSelection();\n            _this.saveSelectionLoopDeferId = defer(_this.saveSelectionLoop);\n        };\n        _this.runSaveSelectionLoop = function() {\n            if (_this.saveSelectionLoopDeferId === null) {\n                _this.saveSelectionLoop();\n            }\n        };\n        _this.stopSaveSelectionLoop = function() {\n            if (_this.saveSelectionLoopDeferId !== null) {\n                cancelDefer(_this.saveSelectionLoopDeferId);\n                _this.saveSelectionLoopDeferId = null;\n                _this.previousSelection = null;\n            }\n        };\n        _this.getInputDOMNode = function() {\n            if (!_this.mounted) {\n                return null;\n            }\n            var input = reactDom.findDOMNode(_assertThisInitialized(_assertThisInitialized(_this)));\n            var isDOMNode =  false && 0; // workaround for react-test-renderer\n            // https://github.com/sanniassin/react-input-mask/issues/147\n            if (input && !isDOMNode) {\n                return null;\n            }\n            if (input.nodeName !== \"INPUT\") {\n                input = input.querySelector(\"input\");\n            }\n            if (!input) {\n                throw new Error(\"react-input-mask: inputComponent doesn't contain input node\");\n            }\n            return input;\n        };\n        _this.getInputValue = function() {\n            var input = _this.getInputDOMNode();\n            if (!input) {\n                return null;\n            }\n            return input.value;\n        };\n        _this.setInputValue = function(value) {\n            var input = _this.getInputDOMNode();\n            if (!input) {\n                return;\n            }\n            _this.value = value;\n            input.value = value;\n        };\n        _this.setCursorToEnd = function() {\n            var filledLength = getFilledLength(_this.maskOptions, _this.value);\n            var pos = getRightEditablePosition(_this.maskOptions, filledLength);\n            if (pos !== null) {\n                _this.setCursorPosition(pos);\n            }\n        };\n        _this.setSelection = function(start, end, options) {\n            if (options === void 0) {\n                options = {};\n            }\n            var input = _this.getInputDOMNode();\n            var isFocused = _this.isFocused(); // don't change selection on unfocused input\n            // because Safari sets focus on selection change (#154)\n            if (!input || !isFocused) {\n                return;\n            }\n            var _options = options, deferred = _options.deferred;\n            if (!deferred) {\n                setInputSelection(input, start, end);\n            }\n            if (_this.selectionDeferId !== null) {\n                cancelDefer(_this.selectionDeferId);\n            } // deferred selection update is required for pre-Lollipop Android browser,\n            // but for consistent behavior we do it for all browsers\n            _this.selectionDeferId = defer(function() {\n                _this.selectionDeferId = null;\n                setInputSelection(input, start, end);\n            });\n            _this.previousSelection = {\n                start: start,\n                end: end,\n                length: Math.abs(end - start)\n            };\n        };\n        _this.getSelection = function() {\n            var input = _this.getInputDOMNode();\n            return getInputSelection(input);\n        };\n        _this.getCursorPosition = function() {\n            return _this.getSelection().start;\n        };\n        _this.setCursorPosition = function(pos) {\n            _this.setSelection(pos, pos);\n        };\n        _this.isFocused = function() {\n            return _this.focused;\n        };\n        _this.getBeforeMaskedValueChangeConfig = function() {\n            var _this$maskOptions = _this.maskOptions, mask = _this$maskOptions.mask, maskChar = _this$maskOptions.maskChar, permanents = _this$maskOptions.permanents, formatChars = _this$maskOptions.formatChars;\n            var alwaysShowMask = _this.props.alwaysShowMask;\n            return {\n                mask: mask,\n                maskChar: maskChar,\n                permanents: permanents,\n                alwaysShowMask: !!alwaysShowMask,\n                formatChars: formatChars\n            };\n        };\n        _this.isInputAutofilled = function(value, selection, previousValue, previousSelection) {\n            var input = _this.getInputDOMNode(); // only check for positive match because it will be false negative\n            // in case of autofill simulation in tests\n            //\n            // input.matches throws an exception if selector isn't supported\n            try {\n                if (input.matches(\":-webkit-autofill\")) {\n                    return true;\n                }\n            } catch (e) {} // if input isn't focused then change event must have been triggered\n            // either by autofill or event simulation in tests\n            if (!_this.focused) {\n                return true;\n            } // if cursor has moved to the end while previousSelection forbids it\n            // then it must be autofill\n            return previousSelection.end < previousValue.length && selection.end === value.length;\n        };\n        _this.onChange = function(event) {\n            var _assertThisInitialize = _assertThisInitialized(_assertThisInitialized(_this)), beforePasteState = _assertThisInitialize.beforePasteState;\n            var _assertThisInitialize2 = _assertThisInitialized(_assertThisInitialized(_this)), previousSelection = _assertThisInitialize2.previousSelection;\n            var beforeMaskedValueChange = _this.props.beforeMaskedValueChange;\n            var value = _this.getInputValue();\n            var previousValue = _this.value;\n            var selection = _this.getSelection(); // autofill replaces entire value, ignore old one\n            // https://github.com/sanniassin/react-input-mask/issues/113\n            if (_this.isInputAutofilled(value, selection, previousValue, previousSelection)) {\n                previousValue = formatValue(_this.maskOptions, \"\");\n                previousSelection = {\n                    start: 0,\n                    end: 0,\n                    length: 0\n                };\n            } // set value and selection as if we haven't\n            // cleared input in onPaste handler\n            if (beforePasteState) {\n                previousSelection = beforePasteState.selection;\n                previousValue = beforePasteState.value;\n                selection = {\n                    start: previousSelection.start + value.length,\n                    end: previousSelection.start + value.length,\n                    length: 0\n                };\n                value = previousValue.slice(0, previousSelection.start) + value + previousValue.slice(previousSelection.end);\n                _this.beforePasteState = null;\n            }\n            var changedState = processChange(_this.maskOptions, value, selection, previousValue, previousSelection);\n            var enteredString = changedState.enteredString;\n            var newSelection = changedState.selection;\n            var newValue = changedState.value;\n            if (isFunction(beforeMaskedValueChange)) {\n                var modifiedValue = beforeMaskedValueChange({\n                    value: newValue,\n                    selection: newSelection\n                }, {\n                    value: previousValue,\n                    selection: previousSelection\n                }, enteredString, _this.getBeforeMaskedValueChangeConfig());\n                newValue = modifiedValue.value;\n                newSelection = modifiedValue.selection;\n            }\n            _this.setInputValue(newValue);\n            if (isFunction(_this.props.onChange)) {\n                _this.props.onChange(event);\n            }\n            if (_this.isWindowsPhoneBrowser) {\n                _this.setSelection(newSelection.start, newSelection.end, {\n                    deferred: true\n                });\n            } else {\n                _this.setSelection(newSelection.start, newSelection.end);\n            }\n        };\n        _this.onFocus = function(event) {\n            var beforeMaskedValueChange = _this.props.beforeMaskedValueChange;\n            var _this$maskOptions2 = _this.maskOptions, mask = _this$maskOptions2.mask, prefix = _this$maskOptions2.prefix;\n            _this.focused = true; // if autoFocus is set, onFocus triggers before componentDidMount\n            _this.mounted = true;\n            if (mask) {\n                if (!_this.value) {\n                    var emptyValue = formatValue(_this.maskOptions, prefix);\n                    var newValue = formatValue(_this.maskOptions, emptyValue);\n                    var filledLength = getFilledLength(_this.maskOptions, newValue);\n                    var cursorPosition = getRightEditablePosition(_this.maskOptions, filledLength);\n                    var newSelection = {\n                        start: cursorPosition,\n                        end: cursorPosition\n                    };\n                    if (isFunction(beforeMaskedValueChange)) {\n                        var modifiedValue = beforeMaskedValueChange({\n                            value: newValue,\n                            selection: newSelection\n                        }, {\n                            value: _this.value,\n                            selection: null\n                        }, null, _this.getBeforeMaskedValueChangeConfig());\n                        newValue = modifiedValue.value;\n                        newSelection = modifiedValue.selection;\n                    }\n                    var isInputValueChanged = newValue !== _this.getInputValue();\n                    if (isInputValueChanged) {\n                        _this.setInputValue(newValue);\n                    }\n                    if (isInputValueChanged && isFunction(_this.props.onChange)) {\n                        _this.props.onChange(event);\n                    }\n                    _this.setSelection(newSelection.start, newSelection.end);\n                } else if (getFilledLength(_this.maskOptions, _this.value) < _this.maskOptions.mask.length) {\n                    _this.setCursorToEnd();\n                }\n                _this.runSaveSelectionLoop();\n            }\n            if (isFunction(_this.props.onFocus)) {\n                _this.props.onFocus(event);\n            }\n        };\n        _this.onBlur = function(event) {\n            var beforeMaskedValueChange = _this.props.beforeMaskedValueChange;\n            var mask = _this.maskOptions.mask;\n            _this.stopSaveSelectionLoop();\n            _this.focused = false;\n            if (mask && !_this.props.alwaysShowMask && isEmpty(_this.maskOptions, _this.value)) {\n                var newValue = \"\";\n                if (isFunction(beforeMaskedValueChange)) {\n                    var modifiedValue = beforeMaskedValueChange({\n                        value: newValue,\n                        selection: null\n                    }, {\n                        value: _this.value,\n                        selection: _this.previousSelection\n                    }, null, _this.getBeforeMaskedValueChangeConfig());\n                    newValue = modifiedValue.value;\n                }\n                var isInputValueChanged = newValue !== _this.getInputValue();\n                if (isInputValueChanged) {\n                    _this.setInputValue(newValue);\n                }\n                if (isInputValueChanged && isFunction(_this.props.onChange)) {\n                    _this.props.onChange(event);\n                }\n            }\n            if (isFunction(_this.props.onBlur)) {\n                _this.props.onBlur(event);\n            }\n        };\n        _this.onMouseDown = function(event) {\n            // tiny unintentional mouse movements can break cursor\n            // position on focus, so we have to restore it in that case\n            //\n            // https://github.com/sanniassin/react-input-mask/issues/108\n            if (!_this.focused && document.addEventListener) {\n                _this.mouseDownX = event.clientX;\n                _this.mouseDownY = event.clientY;\n                _this.mouseDownTime = new Date().getTime();\n                var mouseUpHandler = function mouseUpHandler(mouseUpEvent) {\n                    document.removeEventListener(\"mouseup\", mouseUpHandler);\n                    if (!_this.focused) {\n                        return;\n                    }\n                    var deltaX = Math.abs(mouseUpEvent.clientX - _this.mouseDownX);\n                    var deltaY = Math.abs(mouseUpEvent.clientY - _this.mouseDownY);\n                    var axisDelta = Math.max(deltaX, deltaY);\n                    var timeDelta = new Date().getTime() - _this.mouseDownTime;\n                    if (axisDelta <= 10 && timeDelta <= 200 || axisDelta <= 5 && timeDelta <= 300) {\n                        _this.setCursorToEnd();\n                    }\n                };\n                document.addEventListener(\"mouseup\", mouseUpHandler);\n            }\n            if (isFunction(_this.props.onMouseDown)) {\n                _this.props.onMouseDown(event);\n            }\n        };\n        _this.onPaste = function(event) {\n            if (isFunction(_this.props.onPaste)) {\n                _this.props.onPaste(event);\n            } // event.clipboardData might not work in Android browser\n            // cleaning input to get raw text inside onChange handler\n            if (!event.defaultPrevented) {\n                _this.beforePasteState = {\n                    value: _this.getInputValue(),\n                    selection: _this.getSelection()\n                };\n                _this.setInputValue(\"\");\n            }\n        };\n        _this.handleRef = function(ref) {\n            if (_this.props.children == null && isFunction(_this.props.inputRef)) {\n                _this.props.inputRef(ref);\n            }\n        };\n        var _mask = props.mask, _maskChar = props.maskChar, _formatChars = props.formatChars, _alwaysShowMask = props.alwaysShowMask, _beforeMaskedValueChange = props.beforeMaskedValueChange;\n        var defaultValue = props.defaultValue, _value = props.value;\n        _this.maskOptions = parseMask(_mask, _maskChar, _formatChars);\n        if (defaultValue == null) {\n            defaultValue = \"\";\n        }\n        if (_value == null) {\n            _value = defaultValue;\n        }\n        var _newValue = getStringValue(_value);\n        if (_this.maskOptions.mask && (_alwaysShowMask || _newValue)) {\n            _newValue = formatValue(_this.maskOptions, _newValue);\n            if (isFunction(_beforeMaskedValueChange)) {\n                var oldValue = props.value;\n                if (props.value == null) {\n                    oldValue = defaultValue;\n                }\n                oldValue = getStringValue(oldValue);\n                var modifiedValue = _beforeMaskedValueChange({\n                    value: _newValue,\n                    selection: null\n                }, {\n                    value: oldValue,\n                    selection: null\n                }, null, _this.getBeforeMaskedValueChangeConfig());\n                _newValue = modifiedValue.value;\n            }\n        }\n        _this.value = _newValue;\n        return _this;\n    }\n    var _proto = InputElement.prototype;\n    _proto.componentDidMount = function componentDidMount() {\n        this.mounted = true; // workaround for react-test-renderer\n        // https://github.com/sanniassin/react-input-mask/issues/147\n        if (!this.getInputDOMNode()) {\n            return;\n        }\n        this.isWindowsPhoneBrowser = isWindowsPhoneBrowser();\n        if (this.maskOptions.mask && this.getInputValue() !== this.value) {\n            this.setInputValue(this.value);\n        }\n    };\n    _proto.componentDidUpdate = function componentDidUpdate() {\n        var previousSelection = this.previousSelection;\n        var _this$props = this.props, beforeMaskedValueChange = _this$props.beforeMaskedValueChange, alwaysShowMask = _this$props.alwaysShowMask, mask = _this$props.mask, maskChar = _this$props.maskChar, formatChars = _this$props.formatChars;\n        var previousMaskOptions = this.maskOptions;\n        var showEmpty = alwaysShowMask || this.isFocused();\n        var hasValue = this.props.value != null;\n        var newValue = hasValue ? getStringValue(this.props.value) : this.value;\n        var cursorPosition = previousSelection ? previousSelection.start : null;\n        this.maskOptions = parseMask(mask, maskChar, formatChars);\n        if (!this.maskOptions.mask) {\n            if (previousMaskOptions.mask) {\n                this.stopSaveSelectionLoop(); // render depends on this.maskOptions and this.value,\n                // call forceUpdate to keep it in sync\n                this.forceUpdate();\n            }\n            return;\n        } else if (!previousMaskOptions.mask && this.isFocused()) {\n            this.runSaveSelectionLoop();\n        }\n        var isMaskChanged = this.maskOptions.mask && this.maskOptions.mask !== previousMaskOptions.mask;\n        if (!previousMaskOptions.mask && !hasValue) {\n            newValue = this.getInputValue();\n        }\n        if (isMaskChanged || this.maskOptions.mask && (newValue || showEmpty)) {\n            newValue = formatValue(this.maskOptions, newValue);\n        }\n        if (isMaskChanged) {\n            var filledLength = getFilledLength(this.maskOptions, newValue);\n            if (cursorPosition === null || filledLength < cursorPosition) {\n                if (isFilled(this.maskOptions, newValue)) {\n                    cursorPosition = filledLength;\n                } else {\n                    cursorPosition = getRightEditablePosition(this.maskOptions, filledLength);\n                }\n            }\n        }\n        if (this.maskOptions.mask && isEmpty(this.maskOptions, newValue) && !showEmpty && (!hasValue || !this.props.value)) {\n            newValue = \"\";\n        }\n        var newSelection = {\n            start: cursorPosition,\n            end: cursorPosition\n        };\n        if (isFunction(beforeMaskedValueChange)) {\n            var modifiedValue = beforeMaskedValueChange({\n                value: newValue,\n                selection: newSelection\n            }, {\n                value: this.value,\n                selection: this.previousSelection\n            }, null, this.getBeforeMaskedValueChangeConfig());\n            newValue = modifiedValue.value;\n            newSelection = modifiedValue.selection;\n        }\n        this.value = newValue;\n        var isValueChanged = this.getInputValue() !== this.value; // render depends on this.maskOptions and this.value,\n        // call forceUpdate to keep it in sync\n        if (isValueChanged) {\n            this.setInputValue(this.value);\n            this.forceUpdate();\n        } else if (isMaskChanged) {\n            this.forceUpdate();\n        }\n        var isSelectionChanged = false;\n        if (newSelection.start != null && newSelection.end != null) {\n            isSelectionChanged = !previousSelection || previousSelection.start !== newSelection.start || previousSelection.end !== newSelection.end;\n        }\n        if (isSelectionChanged || isValueChanged) {\n            this.setSelection(newSelection.start, newSelection.end);\n        }\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n        this.mounted = false;\n        if (this.selectionDeferId !== null) {\n            cancelDefer(this.selectionDeferId);\n        }\n        this.stopSaveSelectionLoop();\n    };\n    _proto.render = function render() {\n        var _this$props2 = this.props, mask = _this$props2.mask, alwaysShowMask = _this$props2.alwaysShowMask, maskChar = _this$props2.maskChar, formatChars = _this$props2.formatChars, inputRef = _this$props2.inputRef, beforeMaskedValueChange = _this$props2.beforeMaskedValueChange, children = _this$props2.children, restProps = _objectWithoutPropertiesLoose(_this$props2, [\n            \"mask\",\n            \"alwaysShowMask\",\n            \"maskChar\",\n            \"formatChars\",\n            \"inputRef\",\n            \"beforeMaskedValueChange\",\n            \"children\"\n        ]);\n        var inputElement;\n         true ? warning(// will be updated later in componentDidUpdate\n        !restProps.maxLength || !parseMask(mask, maskChar, formatChars).mask, \"react-input-mask: maxLength property shouldn't be passed to the masked input. It breaks masking and unnecessary because length is limited by the mask length.\") : 0;\n        if (children) {\n            !isFunction(children) ?  true ? invariant(false, \"react-input-mask: children must be a function\") : 0 : void 0;\n            var controlledProps = [\n                \"onChange\",\n                \"onPaste\",\n                \"onMouseDown\",\n                \"onFocus\",\n                \"onBlur\",\n                \"value\",\n                \"disabled\",\n                \"readOnly\"\n            ];\n            var childrenProps = _extends({}, restProps);\n            controlledProps.forEach(function(propId) {\n                return delete childrenProps[propId];\n            });\n            inputElement = children(childrenProps);\n            var conflictProps = controlledProps.filter(function(propId) {\n                return inputElement.props[propId] != null && inputElement.props[propId] !== restProps[propId];\n            });\n            !!conflictProps.length ?  true ? invariant(false, \"react-input-mask: the following props should be passed to the react-input-mask's component and should not be altered in children's function: \" + conflictProps.join(\", \")) : 0 : void 0;\n             true ? warning(!inputRef, \"react-input-mask: inputRef is ignored when children is passed, attach ref to the children instead\") : 0;\n        } else {\n            inputElement = React.createElement(\"input\", _extends({\n                ref: this.handleRef\n            }, restProps));\n        }\n        var changedProps = {\n            onFocus: this.onFocus,\n            onBlur: this.onBlur\n        };\n        if (this.maskOptions.mask) {\n            if (!restProps.disabled && !restProps.readOnly) {\n                changedProps.onChange = this.onChange;\n                changedProps.onPaste = this.onPaste;\n                changedProps.onMouseDown = this.onMouseDown;\n            }\n            if (restProps.value != null) {\n                changedProps.value = this.value;\n            }\n        }\n        inputElement = React.cloneElement(inputElement, changedProps);\n        return inputElement;\n    };\n    return InputElement;\n}(React.Component);\nmodule.exports = InputElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-input-mask/lib/react-input-mask.development.js\n");

/***/ })

};
;